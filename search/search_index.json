{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GA4GH Phenoboard","text":"<p>GA4GH Phenoboard is a tauri app designed  to help curate cohorts of individuals with rare genetic disease using the GA4GH Phenopacket Schema.</p> <p>The app is a work in progress.</p>"},{"location":"angular/","title":"Angular tips","text":"<p>This page includes aide-m\u00e9moires for some common operations.</p>"},{"location":"angular/#create-a-component","title":"Create a component","text":"<p>We are using standalone architecture, and thus to make a new component,  <code>`bash npx nx g @nx/angular:component navbar ```` the</code>--project``argument is not working. Thus, manually create the directory (e.g., src/app/navbar), and move the created files there.</p>"},{"location":"internal/","title":"Internal","text":"<p>The following commands are used by the development team.</p>"},{"location":"internal/#documentation","title":"Documentation","text":"<p>These pages are generated with mkdocs.</p> <p>To set things up, perform the following steps (substitute name of venv if needed).</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install --upgrade pip\npip install mkdocs\npip install mkdocs-material\npip install mkdocs-material[imaging]\npip install pillow cairosvg\npip install mkdocs-material-extensions\npip install mkdocstrings[python]\n</code></pre> <p>To start a local server, enter:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"styles/","title":"Styles","text":"<p>This file records the design decisions taken for the SCSS.</p>"},{"location":"styles/#install-and-initialize-tailwind","title":"install and initialize tailwind","text":"<p>Install tailwind and sass to allow angular to use the library.</p> <pre><code>npm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init\nnpm install -D sass\n</code></pre> <p>This creates a minimal tailwind.config.js in your project root. Adjust this file to include paths to the modules that will use tailwind</p> <pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{html,ts}\",  \n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n</code></pre> <p>In project.json, add the  ```bash src/scss ```` to the styles.</p>"},{"location":"developers/angular_tips/","title":"Angular tips","text":"<p>Some useful tips for working with angular.</p>"},{"location":"developers/angular_tips/#reset-cache","title":"Reset cache","text":"<p>Sometimes Stale build artifacts or module cache may lead to errors. We can clean the cache as follows.</p> <pre><code># Clean Angular/Nx cache\nnpx nx reset\n# Clean node_modules and dist\nrm -rf node_modules dist .angular .output .vite\n# Clear package manager cache (optional but helpful)\nnpm cache clean --force\n# Reinstall\nnpm install\n</code></pre>"},{"location":"developers/angular_tips/#incompatibilitie","title":"Incompatibilitie","text":"<p>Avoid BrowserAnimationsModule in standalone components.  Importing it seems to lead to the error</p> <pre><code>NG05100: Providers from the BrowserModule have already been loaded.\n</code></pre>"},{"location":"developers/building/","title":"Building the app","text":"<p>To build the application binary, enter the following <code>`bash npm run build ```` This outputs the app to</code>dist/phenoboard<code>. and produce produce installers / executables in</code>src-tauri/target/release/``.</p>"},{"location":"developers/hpo-sorting/","title":"Sorting HPO terms","text":"<p>Phenoboard sorts the columns of the table using a depth-first search (DFS). This has the effect of putting related terms close to each other, which makes curation of related concepts easier. This page summarizes the strategy used.</p> <p>The logic of the code is implemented in the GA4GH phetools library, and we provide a summary here.</p>"},{"location":"developers/hpo-sorting/#dfs","title":"DFS","text":"<pre><code> pub fn arrange_term_ids(&amp;mut self, hpo_terms_for_curation: &amp;Vec&lt;TermId&gt;) \n    -&gt; Vec&lt;TermId&gt; {\n        self.hpo_curation_term_id_set.clear();\n        for smt in hpo_terms_for_curation {\n            self.hpo_curation_term_id_set.insert(smt.clone());\n        }\n\n        let neoplasm = TermId::from_str(\"HP:0002664\").unwrap();\n        let mut visited: HashSet&lt;TermId&gt; = HashSet::new();\n        let mut ordered_term_id_list: Vec&lt;TermId&gt; = Vec::new();\n        let mut neoplasm_terms = Vec::new();\n        // First get any Neoplasm terms\n        self.dfs(&amp;neoplasm, &amp;mut visited, &amp;mut neoplasm_terms);\n        // then arrange the remaining terms according to organ system\n        self.dfs(&amp;PHENOTYPIC_ABNORMALITY, &amp;mut visited, &amp;mut ordered_term_id_list);\n        ordered_term_id_list.extend(neoplasm_terms);\n        ordered_term_id_list\n    }\n</code></pre> <p>That is, we use a DFS to order the terms, but place all neoplasm terms after the other terms.</p>"},{"location":"developers/hpo-sorting/#using-rearranged-terms-in-phenoboard","title":"Using rearranged terms in phenoboard","text":"<p>There are three situations in which we arrange terms</p> <ol> <li> <p>When we initialize a new cohort, the user can provide seed terms. This is run through the <code>rust run_text_mining</code> function, which calls <code>rust PhenoboardSingleton::map_text_to_term_list</code> to return JSON representing these hits. TODO - refactor tu use DTOs</p> </li> <li> <p>When we add a single new HPO term to a cohort. This is run through the <code>rust add_hpo_term_to_cohort</code> function.</p> </li> <li> <p>When we add a new phenopacket row to a cohort. This is run through the  <code>rust add_new_row_to_cohort</code> function.</p> </li> </ol> <p>The latter two calls need to rearrange the order of the columns of the existing terms. The strategy is as follows. We expect to get a TemplateDto object with all of the data of the cohort (including possibly edits). We also get the new information (new HPO term or new row). We transform the DTO into a domain object (<code>PheToolsTemplate</code>). We arrange the HPO Term ids to make a new Header object, and then we calculate a vector with the indices of the OLD columns in the NEW vector, allowing us to update simply. </p> <p>```rust pub fn add_hpo_term_to_cohort(     &amp;mut self,     hpo_id: &amp;str,     hpo_label: &amp;str)  -&gt; std::result::Result&lt;(), ValidationErrors&gt; {     let mut verrs = ValidationErrors::new();     let tid = TermId::from_str(hpo_id);     if tid.is_err() {         return Err(ValidationErrors::from_one_err(format!(\"Could not arrange terms: {}\\n\", hpo_id)));     };     let tid = tid.unwrap();     let term = match &amp;self.hpo.term_by_id(&amp;tid) {         Some(term) =&gt; term,         None =&gt;{ return  Err(ValidationErrors::from_one_err(format!(\"could not retrieve HPO term for '{hpo_id}'\"))); }     };     // === STEP 1: Add new HPO term to existing terms and arrange TIDs ===     let hpo_util = HpoUtil::new(self.hpo.clone());     let mut all_tids = self.header.get_hpo_id_list()?;     if all_tids.contains(&amp;tid) {         return Err(ValidationErrors::from_one_err(format!(\"Not allowed to add term {} because it already is present\", &amp;tid)));     }     all_tids.push(tid);     let mut term_arrager = HpoTermArranger::new(self.hpo.clone());     let arranged_terms = term_arrager.arrange_terms(&amp;all_tids)?;     // === Step 3: Rearrange the existing PpktRow objects to have the new HPO terms and set the new terms to \"na\"     // strategy: Make a HashMap with all of the new terms, initialize the values to na. Clone this, pass it to the     // PpktRow object, and update the map with the current values. The remaining (new) terms will be \"na\". Then use     // the new HeaderDupletRow object to write the values.     // 3a. Update the HeaderDupletRow object.     let update_hdr = self.header.update_old(&amp;arranged_terms);     let updated_hdr_arc = Arc::new(update_hdr);     let mut updated_ppkt_rows: Vec = Vec::new();     for ppkt in &amp;self.ppkt_rows {         let result = ppkt.update_header(updated_hdr_arc.clone());         if let Err(e) = result {             verrs.add_errors(e.errors());         } else {             let new_ppkt = result.unwrap();             updated_ppkt_rows.push(new_ppkt);         }     }     if verrs.has_error() {         Err(verrs)     } else {         self.header = updated_hdr_arc.clone();         self.ppkt_rows = updated_ppkt_rows;         Ok(())     } } ````"},{"location":"developers/jscript/","title":"JavaScript packages and versions","text":""},{"location":"developers/jscript/#node","title":"Node","text":"<p>For angular, it is advisable to use even-numbered node version. 20 is stable.</p> <pre><code>nvm install 20.19.3\nnvm use 20.19.3\nnvm alias default 20.19.3\n</code></pre>"},{"location":"developers/jscript/#angular","title":"Angular","text":"<p>Development was started at version 17. We upgraded to version 20 as follows.</p>"},{"location":"developers/overview/","title":"Developers","text":"<p>GA4GH Phenoboard is a tauri application with a Rust backend and an Angular front end. It is designed to curate cohorts of individuals diagnosed with genetic disease using Human Phenotype Ontology and Global Alliance for Genomics and Health Phenopacket Schema.</p> <p>The application makes major use of the following rust crates.</p> <ul> <li>ontololius</li> <li>ga4ghphetools</li> <li>fenominal</li> </ul> <p>This page summarizes some of the angular and Rust/tauri commands that have been useful to create the application.</p>"},{"location":"developers/overview/#initial-setup","title":"Initial setup","text":"<p>These steps were used to initialize the application and do not need to be repeated</p> <pre><code>npm create tauri@latest\n</code></pre> <p>The installer will ask questions about settings. We chose typescript, angular, npm.</p> <p>Following this, run the following command.</p> <pre><code>npm install\n</code></pre> <p>Note that we are using standalone components.</p>"},{"location":"developers/overview/#run-the-gui-application-in-development-mode","title":"Run the GUI application in development mode","text":"<pre><code>npm run tauri dev\n</code></pre>"},{"location":"developers/overview/#creating-new-components","title":"Creating new components","text":"<p>To generate a new component, navigate to the src/app folder, make a directory with the name of the component, cd into the new directory,  and enter the following command.</p> <pre><code>npx nx generate @nx/angular:component &lt;name&gt; --standalone\n</code></pre> <p>This will initialize the typical four files for an angular component.</p>"},{"location":"developers/overview/#port-issues","title":"Port issues","text":"<p>If one gets the error message: <code>Port 1420 is already in use</code>, then use the following command to obtain the process ID:</p> <pre><code>lsof -i :1420\nCOMMAND   PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME\nnode    32315 &lt;user&gt;   49u  IPv4 0xd9cc1bb0104a525f      0t0  TCP localhost:timbuktu-srv4 (LISTEN)\n</code></pre> <p>then end the process with</p> <pre><code>kill -9 &lt;PID&gt;\n</code></pre> <p>This may also cause the typescript part of the app to not be updated when we run <code>npm run tauri dev</code>.</p>"},{"location":"developers/overview/#run-in-browser","title":"Run in browser","text":"<p>Can be useful with the DevTools panel</p> <pre><code>npm run start\n</code></pre>"}]}